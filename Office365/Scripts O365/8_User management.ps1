# importing users from a CSV-file
Import-Csv .\Users.csv -Delimiter ';' | Select-Object -First 2 |
    ForEach-Object { `    New-MsolUser `    -UserPrincipalName ( $_.Name.replace(' ','.') + "@" + $domain ) `    -City $_.city `    -State $_.state `    -Country $_.Country `    -DisplayName $_.Name } |    Select-Object UserPrincipalName, Password |    Export-CSV UsersWithPasswords_temp.csv -NoTypeInformation -Delimiter ';' # Or, creating mailboxes AND usersImport-Csv .\Users.csv -Delimiter ';' |
    ForEach-Object { `    New-Mailbox `    -MicrosoftOnlineServicesID ( $_.Name.replace(' ','.') + "@" + $domain ) `    -Name $_.Name `    -DisplayName $_.Name `    -Password (ConvertTo-SecureString -String 'R1234-56' -AsPlainText -Force) `    -ResetPasswordOnNextLogon $false } # we haven't defined a license -> the users will only work for a grace period# removing the usersImport-Csv .\Users.csv -Delimiter ';' |
    ForEach-Object { `    Remove-MsolUser `    -UserPrincipalName ( $_.Name.replace(' ','.') + "@" + $domain ) -Force }Get-Mailbox | Where-Object DisplayName -ne "admin" | Remove-Mailbox -WhatIfGet-MsolUser# updating usersget-command *msoluser*Import-Csv .\Users.csv -Delimiter ';' |    ForEach-Object { `    Set-MsolUser `    -UserPrincipalName ( $_.Name.replace(' ','.') + "@" + $domain ) `    -FirstName $_.Name.substring(0,$_.Name.IndexOf(' ')).Trim() `    -LastName $_.Name.substring($_.Name.IndexOf(' ')).Trim() `    -City $_.city `    -State $_.state `    -Country $_.Country }Get-Mailbox | Set-MailboxRegionalConfiguration -Language nl-BE -TimeZone "Romance Standard Time"# licenses# check available licensesGet-MsolAccountSku#only users in a valid ISO 3166-1 alpha 2 country can get a licenseGet-MsolUser -All | where {$_.UsageLocation -eq $null}Get-MsolUser -All | where {$_.UsageLocation -eq $null} | Set-MsolUser -UsageLocation 'BE'# save license, and set for all users$mylicense = Get-MsolAccountSkuGet-MsolUser -All -UnlicensedUsersOnly | Set-MsolUserLicense -AddLicenses $mylicense.AccountSkuId# setting user picturesGet-Command Set-UserPhoto# Is from the exchange-set, so only possible for users that have mailboxes$allpictures = Get-ChildItem UserPicturesforeach($picture in $allpictures){    $photo = ([Byte[]] $(Get-Content -Path $picture.FullName -Encoding Byte -ReadCount 0))    # $picture | fl *    try    {        Set-UserPhoto $picture.BaseName -PictureData $photo -Confirm:$False    }    Catch    {}}